<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="kO8#@0s8sQfEywYHu)Zt" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="$yE-.z~`*5Z5/fY$SJ-W" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace OLED {" line1="    let font = [0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422," line2="        0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422," line3="        0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422," line4="        0x0022d422, 0x0022d422, 0x00000000, 0x000002e0, 0x00018060, 0x00afabea, 0x00aed6ea, 0x01991133, 0x010556aa, 0x00000060," line5="        0x000045c0, 0x00003a20, 0x00051140, 0x00023880, 0x00002200, 0x00021080, 0x00000100, 0x00111110, 0x0007462e, 0x00087e40," line6="        0x000956b9, 0x0005d629, 0x008fa54c, 0x009ad6b7, 0x008ada88, 0x00119531, 0x00aad6aa, 0x0022b6a2, 0x00000140, 0x00002a00," line7="        0x0008a880, 0x00052940, 0x00022a20, 0x0022d422, 0x00e4d62e, 0x000f14be, 0x000556bf, 0x0008c62e, 0x0007463f, 0x0008d6bf," line8="        0x000094bf, 0x00cac62e, 0x000f909f, 0x000047f1, 0x0017c629, 0x0008a89f, 0x0008421f, 0x01f1105f, 0x01f4105f, 0x0007462e," line9="        0x000114bf, 0x000b6526, 0x010514bf, 0x0004d6b2, 0x0010fc21, 0x0007c20f, 0x00744107, 0x01f4111f, 0x000d909b, 0x00117041," line10="        0x0008ceb9, 0x0008c7e0, 0x01041041, 0x000fc620, 0x00010440, 0x01084210, 0x00000820, 0x010f4a4c, 0x0004529f, 0x00094a4c," line11="        0x000fd288, 0x000956ae, 0x000097c4, 0x0007d6a2, 0x000c109f, 0x000003a0, 0x0006c200, 0x0008289f, 0x000841e0, 0x01e1105e," line12="        0x000e085e, 0x00064a4c, 0x0002295e, 0x000f2944, 0x0001085c, 0x00012a90, 0x010a51e0, 0x010f420e, 0x00644106, 0x01e8221e," line13="        0x00093192, 0x00222292, 0x00095b52, 0x0008fc80, 0x000003e0, 0x000013f1, 0x00841080, 0x0022d422];" line14="    // 0x0022d422 -&gt; &quot;?&quot;" line15="" line16="    let PAGE_NUM = 8" line17="    let COLUMN_NUM = 132" line18="    let FONT_SIZE = 5" line19="" line20="    let _I2CAddr = 0;" line21="    let _screen = pins.createBuffer(1057);" line22="    let _buf2 = pins.createBuffer(2);" line23="    let _buf3 = pins.createBuffer(3);" line24="    let _buf4 = pins.createBuffer(4);" line25="    let _ZOOM = 0;" line26="" line27="    function cmd1(d: number) {" line28="        let n = d % 256;" line29="        pins.i2cWriteNumber(_I2CAddr, n, NumberFormat.UInt16BE);" line30="    }" line31="" line32="    function cmd2(d1: number, d2: number) {" line33="        _buf3[0] = 0;" line34="        _buf3[1] = d1;" line35="        _buf3[2] = d2;" line36="        pins.i2cWriteBuffer(_I2CAddr, _buf3);" line37="    }" line38="" line39="    function cmd3(d1: number, d2: number, d3: number) {" line40="        _buf4[0] = 0;" line41="        _buf4[1] = d1;" line42="        _buf4[2] = d2;" line43="        _buf4[3] = d3;" line44="        pins.i2cWriteBuffer(_I2CAddr, _buf4);" line45="    }" line46="" line47="    function set_pos(col: number = 0, page: number = 0) {" line48="        cmd1(0xb0 | page) // page number" line49="        //        let c = col * (_ZOOM + 1)" line50="        let c = col * (_ZOOM + 1) + 2 // for SH1106" line51="        cmd1(0x00 | (c % 16)) // lower start column address" line52="        cmd1(0x10 | (c &gt;&gt; 4)) // upper start column address    " line53="    }" line54="" line55="    // clear bit" line56="    function clrbit(d: number, b: number): number {" line57="        if (d &amp; (1 &lt;&lt; b))" line58="            d -= (1 &lt;&lt; b)" line59="        return d" line60="    }" line61="" line62="    function setBitColor(buffer:number, page:number, color:number): number {" line63="        if(color) {" line64="            return buffer | (1 &lt;&lt; page)" line65="        }" line66="        else {" line67="            return clrbit(buffer, page)" line68="        }" line69="    }" line70="" line71="    //% blockId=&quot;TEST_CODE&quot; block=&quot;test code&quot;" line72="    //% weight=70 blockGap=8" line73="    //% parts=OLED trackArgs=0" line74="    export function testCode() {" line75="        pixel(0, 0, 1)" line76="        pixel(1, 1, 1)" line77="        pixel(2, 0, 1)" line78="        pixel(3, 1, 1)" line79="    }" line80="" line81="" line82="    /**" line83="     * set pixel in OLED" line84="     * @param x is X alis, eg: 0" line85="     * @param y is Y alis, eg: 0" line86="     * @param color is dot color, eg: 1" line87="     */" line88="    //% blockId=&quot;OLED_PIXEL&quot; block=&quot;set pixel at x %x|y %y|color %color&quot;" line89="    //% weight=70 blockGap=8" line90="    //% parts=OLED trackArgs=0" line91="    export function pixel(x: number, y: number, color: number = 1) {" line92="        let page = y &gt;&gt; 3               // ページ数(0-7)" line93="        let shift_page = y % PAGE_NUM   // ページ中の行数(0-7)" line94="        let ind = x * (_ZOOM + 1) + page * 128 + 1 // (x + page*128)" line95="        let b = setBitColor(_screen[ind], shift_page, color)" line96="        _screen[ind] = b" line97="        set_pos(x, page)" line98="        if (_ZOOM) {" line99="            _screen[ind + 1] = b" line100="            _buf3[0] = 0x40" line101="            _buf3[1] = _buf3[2] = b" line102="            pins.i2cWriteBuffer(_I2CAddr, _buf3)" line103="        }" line104="        else {" line105="            _buf2[0] = 0x40" line106="            _buf2[1] = b" line107="            pins.i2cWriteBuffer(_I2CAddr, _buf2)" line108="        }" line109="    }" line110="" line111="    /**" line112="     * show text in OLED" line113="     * @param x is X alis, eg: 0" line114="     * @param y is Y alis, eg: 0" line115="     * @param s is the text will be show, eg: 'Hello!'" line116="     * @param color is string color, eg: 1" line117="     */" line118="    //% blockId=&quot;OLED_SHOWSTRING&quot; block=&quot;show string at x %x|y %y|text %s|color %color&quot;" line119="    //% weight=80 blockGap=8" line120="    //% parts=OLED trackArgs=0" line121="    export function showString(x: number, y: number, s: string, color: number = 1) {" line122="        let col = 0" line123="        let fontData = 0" line124="        let screenIdx = 0" line125="        let maxLength = _ZOOM ? 12 : 25　// 1行当たりの最大文字数" line126="        let stringLength = s.length &lt;= maxLength ? s.length : maxLength" line127="        for (let stringNo = 0; stringNo &lt; stringLength; stringNo++) {" line128="            fontData = font[s.charCodeAt(stringNo)]" line129="            for (let i = 0; i &lt; FONT_SIZE; i++) {" line130="                col = 0" line131="                for (let j = 0; j &lt; FONT_SIZE; j++) {" line132="                    if (fontData &amp; (1 &lt;&lt; (FONT_SIZE * i + j)))" line133="                        col |= (1 &lt;&lt; (j + 1))" line134="                }" line135="                screenIdx = (x + stringNo) * FONT_SIZE * (_ZOOM + 1) + y * 132 + i * (_ZOOM + 1) + 1" line136="                if (color == 0)" line137="                    col = 255 - col" line138="                _screen[screenIdx] = col" line139="                if (_ZOOM)" line140="                    _screen[screenIdx + 1] = col" line141="            }" line142="        }" line143="        set_pos(x * FONT_SIZE, y)" line144="        let indX = x * FONT_SIZE * (_ZOOM + 1) + y * 132 + 1" line145="        let buf = _screen.slice(indX, screenIdx + 1)" line146="        buf.shift(-1)" line147="        buf[0] = 0x40" line148="        pins.i2cWriteBuffer(_I2CAddr, buf)" line149="    }" line150="" line151="    /**" line152="     * show a number in OLED" line153="     * @param x is X alis, eg: 0" line154="     * @param y is Y alis, eg: 0" line155="     * @param num is the number will be show, eg: 12" line156="     * @param color is number color, eg: 1" line157="     */" line158="    //% blockId=&quot;OLED_NUMBER&quot; block=&quot;show a Number at x %x|y %y|number %num|color %color&quot;" line159="    //% weight=80 blockGap=8" line160="    //% parts=OLED trackArgs=0" line161="    export function showNumber(x: number, y: number, num: number, color: number = 1) {" line162="        showString(x, y, num.toString(), color)" line163="    }" line164="" line165="    /**" line166="     * draw a horizontal line" line167="     * @param x is X alis, eg: 0" line168="     * @param y is Y alis, eg: 0" line169="     * @param len is the length of line, eg: 10" line170="     * @param color is line color, eg: 1" line171="     */" line172="    //% blockId=&quot;OLED_HLINE&quot; block=&quot;draw a horizontal line at x %x|y %y|number %len|color %color&quot;" line173="    //% weight=71 blockGap=8" line174="    //% parts=OLED trackArgs=0" line175="    export function hline(x: number, y: number, len: number, color: number = 1) {" line176="        for (let k = x; k &lt; (x + len); k++)" line177="            pixel(k, y, color)" line178="    }" line179="" line180="    /**" line181="     * draw a vertical line" line182="     * @param x is X alis, eg: 0" line183="     * @param y is Y alis, eg: 0" line184="     * @param len is the length of line, eg: 10" line185="     * @param color is line color, eg: 1" line186="     */" line187="    //% blockId=&quot;OLED_VLINE&quot; block=&quot;draw a vertical line at x %x|y %y|number %len|color %color&quot;" line188="    //% weight=72 blockGap=8" line189="    //% parts=OLED trackArgs=0" line190="    export function vline(x: number, y: number, len: number, color: number = 1) {" line191="        for (let l = y; l &lt; (y + len); l++)" line192="            pixel(x, l, color)" line193="    }" line194="" line195="    /**" line196="     * draw a rectangle" line197="     * @param x1 is X alis, eg: 0" line198="     * @param y1 is Y alis, eg: 0" line199="     * @param x2 is X alis, eg: 60" line200="     * @param y2 is Y alis, eg: 30" line201="     * @param color is line color, eg: 1" line202="     */" line203="    //% blockId=&quot;OLED_RECT&quot; block=&quot;draw a rectangle at x1 %x1|y1 %y1|x2 %x2|y2 %y2|color %color&quot;" line204="    //% weight=73 blockGap=8" line205="    //% parts=OLED trackArgs=0" line206="    export function rect(x1: number, y1: number, x2: number, y2: number, color: number = 1) {" line207="        if (x1 &gt; x2)" line208="            x1 = [x2, x2 = x1][0];" line209="        if (y1 &gt; y2)" line210="            y1 = [y2, y2 = y1][0];" line211="        hline(x1, y1, x2 - x1 + 1, color)" line212="        hline(x1, y2, x2 - x1 + 1, color)" line213="        vline(x1, y1, y2 - y1 + 1, color)" line214="        vline(x2, y1, y2 - y1 + 1, color)" line215="    }" line216="" line217="    /**" line218="     * fill a rectangle" line219="     * @param x1 is X alis, eg: 0" line220="     * @param y1 is Y alis, eg: 0" line221="     * @param x2 is X alis, eg: 60" line222="     * @param y2 is Y alis, eg: 30" line223="     * @param color is line color, eg: 1" line224="     */" line225="    //% blockId=&quot;OLED_FILLRECT&quot; block=&quot;fillRect at x1 %x1|y1 %y1|x2 %x2|y2 %y2|color %color&quot;" line226="    //% weight=73 blockGap=8" line227="    //% parts=OLED trackArgs=0" line228="    export function fillRect(x1: number, y1: number, x2: number, y2: number, color: number = 1) {" line229="        for (let y = y1; y &lt;= y2; y++) {" line230="            for (let x = x1; x &lt;= x2; x++) {" line231="                pixel(x, y)" line232="            }" line233="        }" line234="    }" line235="    /**" line236="     * invert display" line237="     * @param d true: invert / false: normal, eg: true" line238="     */" line239="    //% blockId=&quot;OLED_INVERT&quot; block=&quot;invert display %d&quot;" line240="    //% weight=65 blockGap=8" line241="    //% parts=OLED trackArgs=0" line242="    export function invert(d: boolean = true) {" line243="        let q = (d) ? 0xA7 : 0xA6" line244="        cmd1(q)" line245="    }" line246="" line247="    /**" line248="     * draw / redraw screen" line249="     */" line250="    //% blockId=&quot;OLED_DRAW&quot; block=&quot;draw&quot;" line251="    //% weight=64 blockGap=8" line252="    //% parts=OLED trackArgs=0" line253="    export function draw() {" line254="        for (let drawPage = 0; drawPage &lt; PAGE_NUM; drawPage++) {" line255="            set_pos(0, drawPage)" line256="            pins.i2cWriteBuffer(_I2CAddr, _screen)" line257="        }" line258="    }" line259="" line260="    function clearData() {" line261="        _screen.fill(0)" line262="        _screen[0] = 0x40" line263="    }" line264="" line265="    /**" line266="     * clear screen" line267="     */" line268="    //% blockId=&quot;OLED_CLEAR&quot; block=&quot;clear&quot;" line269="    //% weight=63 blockGap=8" line270="    //% parts=OLED trackArgs=0" line271="    export function clear() {" line272="        clearData()" line273="        draw()" line274="    }" line275="" line276="    /**" line277="     * turn on screen" line278="     */" line279="    //% blockId=&quot;OLED_ON&quot; block=&quot;display on&quot;" line280="    //% weight=62 blockGap=8" line281="    //% parts=OLED trackArgs=0" line282="    export function on() {" line283="        cmd1(0xAF)" line284="    }" line285="" line286="    /**" line287="     * turn off screen" line288="     */" line289="    //% blockId=&quot;OLED_OFF&quot; block=&quot;display off&quot;" line290="    //% weight=61 blockGap=8" line291="    //% parts=OLED trackArgs=0" line292="    export function off() {" line293="        cmd1(0xAE)" line294="    }" line295="" line296="    /**" line297="     * zoom mode" line298="     * @param d true zoom / false normal, eg: true" line299="     */" line300="    //% blockId=&quot;OLED_ZOOM&quot; block=&quot;zoom %d&quot;" line301="    //% weight=60 blockGap=8" line302="    //% parts=OLED trackArgs=0" line303="    export function zoom(d: boolean = true) {" line304="        _ZOOM = (d) ? 1 : 0" line305="        cmd2(0xd6, _ZOOM)" line306="    }" line307="" line308="    /**" line309="     * OLED initialize" line310="     * @param addr is i2c addr, eg: 60" line311="     */" line312="    //% blockId=&quot;OLED_initialize&quot; block=&quot;initialize OLED&quot;" line313="    //% weight=100 blockGap=8" line314="    //% parts=OLED trackArgs=0" line315="    export function initialize() {" line316="        _I2CAddr = 60;" line317="        _ZOOM = 0" line318="        cmd1(0xAE)       // SSD1306_DISPLAYOFF" line319="        cmd1(0xA4)       // SSD1306_DISPLAYALLON_RESUME" line320="        cmd2(0xD5, 0xF0) // SSD1306_SETDISPLAYCLOCKDIV" line321="        cmd2(0xA8, 0x3F) // SSD1306_SETMULTIPLEX" line322="        cmd2(0xD3, 0x00) // SSD1306_SETDISPLAYOFFSET" line323="        cmd1(0 | 0x0)    // line #SSD1306_SETSTARTLINE" line324="        cmd2(0x8D, 0x14) // SSD1306_CHARGEPUMP" line325="        cmd2(0x20, 0x00) // SSD1306_MEMORYMODE" line326="        cmd3(0x21, 0, 127) // SSD1306_COLUMNADDR" line327="        cmd3(0x22, 0, 63)  // SSD1306_PAGEADDR" line328="        cmd1(0xa0 | 0x1) // SSD1306_SEGREMAP" line329="        cmd1(0xc8)       // SSD1306_COMSCANDEC" line330="        cmd2(0xDA, 0x12) // SSD1306_SETCOMPINS" line331="        cmd2(0x81, 0xCF) // SSD1306_SETCONTRAST" line332="        cmd2(0xd9, 0xF1) // SSD1306_SETPRECHARGE" line333="        cmd2(0xDB, 0x40) // SSD1306_SETVCOMDETECT" line334="        cmd1(0xA6)       // SSD1306_NORMALDISPLAY" line335="        cmd2(0xD6, _ZOOM)    // zoom off" line336="        cmd1(0xAF)       // SSD1306_DISPLAYON" line337="        clear()" line338="    }" line339="}" numlines="340"></mutation><next><block type="OLED_initialize" id="22E{3kD342|;s*Vh}gBs"></block></next></block></statement></block></xml>