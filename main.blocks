<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="E({LXLF}PsG676?_%7~G" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="CWnH1gI!rDO0ejw{}HxU" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace OLED {" line1="    let font = [0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422," line2="        0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422," line3="        0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422, 0x0022d422," line4="        0x0022d422, 0x0022d422, 0x00000000, 0x000002e0, 0x00018060, 0x00afabea, 0x00aed6ea, 0x01991133, 0x010556aa, 0x00000060," line5="        0x000045c0, 0x00003a20, 0x00051140, 0x00023880, 0x00002200, 0x00021080, 0x00000100, 0x00111110, 0x0007462e, 0x00087e40," line6="        0x000956b9, 0x0005d629, 0x008fa54c, 0x009ad6b7, 0x008ada88, 0x00119531, 0x00aad6aa, 0x0022b6a2, 0x00000140, 0x00002a00," line7="        0x0008a880, 0x00052940, 0x00022a20, 0x0022d422, 0x00e4d62e, 0x000f14be, 0x000556bf, 0x0008c62e, 0x0007463f, 0x0008d6bf," line8="        0x000094bf, 0x00cac62e, 0x000f909f, 0x000047f1, 0x0017c629, 0x0008a89f, 0x0008421f, 0x01f1105f, 0x01f4105f, 0x0007462e," line9="        0x000114bf, 0x000b6526, 0x010514bf, 0x0004d6b2, 0x0010fc21, 0x0007c20f, 0x00744107, 0x01f4111f, 0x000d909b, 0x00117041," line10="        0x0008ceb9, 0x0008c7e0, 0x01041041, 0x000fc620, 0x00010440, 0x01084210, 0x00000820, 0x010f4a4c, 0x0004529f, 0x00094a4c," line11="        0x000fd288, 0x000956ae, 0x000097c4, 0x0007d6a2, 0x000c109f, 0x000003a0, 0x0006c200, 0x0008289f, 0x000841e0, 0x01e1105e," line12="        0x000e085e, 0x00064a4c, 0x0002295e, 0x000f2944, 0x0001085c, 0x00012a90, 0x010a51e0, 0x010f420e, 0x00644106, 0x01e8221e," line13="        0x00093192, 0x00222292, 0x00095b52, 0x0008fc80, 0x000003e0, 0x000013f1, 0x00841080, 0x0022d422];" line14="" line15="    let _I2CAddr = 0;" line16="    let _screen = pins.createBuffer(1025);" line17="    let _buf2 = pins.createBuffer(2);" line18="    let _buf3 = pins.createBuffer(3);" line19="    let _buf4 = pins.createBuffer(4);" line20="    let _ZOOM = 0;" line21="" line22="    function cmd1(d: number) {" line23="        let n = d % 256;" line24="        pins.i2cWriteNumber(_I2CAddr, n, NumberFormat.UInt16BE);" line25="    }" line26="" line27="    function cmd2(d1: number, d2: number) {" line28="        _buf3[0] = 0;" line29="        _buf3[1] = d1;" line30="        _buf3[2] = d2;" line31="        pins.i2cWriteBuffer(_I2CAddr, _buf3);" line32="    }" line33="" line34="    function cmd3(d1: number, d2: number, d3: number) {" line35="        _buf4[0] = 0;" line36="        _buf4[1] = d1;" line37="        _buf4[2] = d2;" line38="        _buf4[3] = d3;" line39="        pins.i2cWriteBuffer(_I2CAddr, _buf4);" line40="    }" line41="" line42="    function set_pos(col: number = 0, page: number = 0) {" line43="        cmd1(0xb0 | page) // page number" line44="        //        let c = col * (_ZOOM + 1)" line45="        let c = col * (_ZOOM + 1) + 2 // for SH1106" line46="        cmd1(0x00 | (c % 16)) // lower start column address" line47="        cmd1(0x10 | (c &gt;&gt; 4)) // upper start column address    " line48="    }" line49="" line50="    // clear bit" line51="    function clrbit(d: number, b: number): number {" line52="        if (d &amp; (1 &lt;&lt; b))" line53="            d -= (1 &lt;&lt; b)" line54="        return d" line55="    }" line56="" line57="    /**" line58="     * set pixel in OLED" line59="     * @param x is X alis, eg: 0" line60="     * @param y is Y alis, eg: 0" line61="     * @param color is dot color, eg: 1" line62="     */" line63="    //% blockId=&quot;OLED_PIXEL&quot; block=&quot;set pixel at x %x|y %y|color %color&quot;" line64="    //% weight=70 blockGap=8" line65="    //% parts=OLED trackArgs=0" line66="    export function pixel(x: number, y: number, color: number = 1) {" line67="        let page = y &gt;&gt; 3" line68="        let shift_page = y % 8" line69="        let ind = x * (_ZOOM + 1) + page * 128 + 1" line70="        let b = (color) ? (_screen[ind] | (1 &lt;&lt; shift_page)) : clrbit(_screen[ind], shift_page)" line71="        _screen[ind] = b" line72="        set_pos(x, page)" line73="        if (_ZOOM) {" line74="            _screen[ind + 1] = b" line75="            _buf3[0] = 0x40" line76="            _buf3[1] = _buf3[2] = b" line77="            pins.i2cWriteBuffer(_I2CAddr, _buf3)" line78="        }" line79="        else {" line80="            _buf2[0] = 0x40" line81="            _buf2[1] = b" line82="            pins.i2cWriteBuffer(_I2CAddr, _buf2)" line83="        }" line84="    }" line85="" line86="    /**" line87="     * show text in OLED" line88="     * @param x is X alis, eg: 0" line89="     * @param y is Y alis, eg: 0" line90="     * @param s is the text will be show, eg: 'Hello!'" line91="     * @param color is string color, eg: 1" line92="     */" line93="    //% blockId=&quot;OLED_SHOWSTRING&quot; block=&quot;show string at x %x|y %y|text %s|color %color&quot;" line94="    //% weight=80 blockGap=8" line95="    //% parts=OLED trackArgs=0" line96="    export function showString(x: number, y: number, s: string, color: number = 1) {" line97="        let col = 0" line98="        let p = 0" line99="        let ind2 = 0" line100="        let maxLength = _ZOOM ? 12 : 25" line101="        let stringLength = s.length &lt;= maxLength ? s.length : maxLength" line102="        for (let stringNo = 0; stringNo &lt; stringLength; stringNo++) {" line103="            p = font[s.charCodeAt(stringNo)]" line104="            for (let i = 0; i &lt; 5; i++) {" line105="                col = 0" line106="                for (let j = 0; j &lt; 5; j++) {" line107="                    if (p &amp; (1 &lt;&lt; (5 * i + j)))" line108="                        col |= (1 &lt;&lt; (j + 1))" line109="                }" line110="                ind2 = (x + stringNo) * 5 * (_ZOOM + 1) + y * 128 + i * (_ZOOM + 1) + 1" line111="                if (color == 0)" line112="                    col = 255 - col" line113="                _screen[ind2] = col" line114="                if (_ZOOM)" line115="                    _screen[ind2 + 1] = col" line116="            }" line117="        }" line118="        set_pos(x * 5, y)" line119="        let indX = x * 5 * (_ZOOM + 1) + y * 128" line120="        let buf = _screen.slice(indX, ind2 + 1)" line121="        buf.shift(-1)" line122="        buf[0] = 0x40" line123="        pins.i2cWriteBuffer(_I2CAddr, buf)" line124="    }" line125="" line126="    /**" line127="     * show a number in OLED" line128="     * @param x is X alis, eg: 0" line129="     * @param y is Y alis, eg: 0" line130="     * @param num is the number will be show, eg: 12" line131="     * @param color is number color, eg: 1" line132="     */" line133="    //% blockId=&quot;OLED_NUMBER&quot; block=&quot;show a Number at x %x|y %y|number %num|color %color&quot;" line134="    //% weight=80 blockGap=8" line135="    //% parts=OLED trackArgs=0" line136="    export function showNumber(x: number, y: number, num: number, color: number = 1) {" line137="        showString(x, y, num.toString(), color)" line138="    }" line139="" line140="    /**" line141="     * draw a horizontal line" line142="     * @param x is X alis, eg: 0" line143="     * @param y is Y alis, eg: 0" line144="     * @param len is the length of line, eg: 10" line145="     * @param color is line color, eg: 1" line146="     */" line147="    //% blockId=&quot;OLED_HLINE&quot; block=&quot;draw a horizontal line at x %x|y %y|number %len|color %color&quot;" line148="    //% weight=71 blockGap=8" line149="    //% parts=OLED trackArgs=0" line150="    export function hline(x: number, y: number, len: number, color: number = 1) {" line151="        for (let k = x; k &lt; (x + len); k++)" line152="            pixel(k, y, color)" line153="    }" line154="" line155="    /**" line156="     * draw a vertical line" line157="     * @param x is X alis, eg: 0" line158="     * @param y is Y alis, eg: 0" line159="     * @param len is the length of line, eg: 10" line160="     * @param color is line color, eg: 1" line161="     */" line162="    //% blockId=&quot;OLED_VLINE&quot; block=&quot;draw a vertical line at x %x|y %y|number %len|color %color&quot;" line163="    //% weight=72 blockGap=8" line164="    //% parts=OLED trackArgs=0" line165="    export function vline(x: number, y: number, len: number, color: number = 1) {" line166="        for (let l = y; l &lt; (y + len); l++)" line167="            pixel(x, l, color)" line168="    }" line169="" line170="    /**" line171="     * draw a rectangle" line172="     * @param x1 is X alis, eg: 0" line173="     * @param y1 is Y alis, eg: 0" line174="     * @param x2 is X alis, eg: 60" line175="     * @param y2 is Y alis, eg: 30" line176="     * @param color is line color, eg: 1" line177="     */" line178="    //% blockId=&quot;OLED_RECT&quot; block=&quot;draw a rectangle at x1 %x1|y1 %y1|x2 %x2|y2 %y2|color %color&quot;" line179="    //% weight=73 blockGap=8" line180="    //% parts=OLED trackArgs=0" line181="    export function rect(x1: number, y1: number, x2: number, y2: number, color: number = 1) {" line182="        if (x1 &gt; x2)" line183="            x1 = [x2, x2 = x1][0];" line184="        if (y1 &gt; y2)" line185="            y1 = [y2, y2 = y1][0];" line186="        hline(x1, y1, x2 - x1 + 1, color)" line187="        hline(x1, y2, x2 - x1 + 1, color)" line188="        vline(x1, y1, y2 - y1 + 1, color)" line189="        vline(x2, y1, y2 - y1 + 1, color)" line190="    }" line191="" line192="    /**" line193="     * fill a rectangle" line194="     * @param x1 is X alis, eg: 0" line195="     * @param y1 is Y alis, eg: 0" line196="     * @param x2 is X alis, eg: 60" line197="     * @param y2 is Y alis, eg: 30" line198="     * @param color is line color, eg: 1" line199="     */" line200="    //% blockId=&quot;OLED_FILLRECT&quot; block=&quot;fillRect at x1 %x1|y1 %y1|x2 %x2|y2 %y2|color %color&quot;" line201="    //% weight=73 blockGap=8" line202="    //% parts=OLED trackArgs=0" line203="    export function fillRect(x1: number, y1: number, x2: number, y2: number, color: number = 1) {" line204="        for (let x = x1; x &lt;= x2; x++) {" line205="            for (let y = y1; y &lt;= y2; y++) {" line206="                pixel(x, y)" line207="            }" line208="        }" line209="    }" line210="    /**" line211="     * invert display" line212="     * @param d true: invert / false: normal, eg: true" line213="     */" line214="    //% blockId=&quot;OLED_INVERT&quot; block=&quot;invert display %d&quot;" line215="    //% weight=65 blockGap=8" line216="    //% parts=OLED trackArgs=0" line217="    export function invert(d: boolean = true) {" line218="        let q = (d) ? 0xA7 : 0xA6" line219="        cmd1(q)" line220="    }" line221="" line222="    /**" line223="     * draw / redraw screen" line224="     */" line225="    //% blockId=&quot;OLED_DRAW&quot; block=&quot;draw&quot;" line226="    //% weight=64 blockGap=8" line227="    //% parts=OLED trackArgs=0" line228="    export function draw() {" line229="        for (let drawPage = 0; drawPage &lt;= 7; drawPage++) {" line230="            set_pos(0, drawPage)" line231="            let drawBuf = pins.createBuffer(129)" line232="            drawBuf = _screen.slice(drawPage * 128 + 1, (drawPage + 1) * 128)" line233="            drawBuf.shift(-1)" line234="            drawBuf[0] = 0x40" line235="            pins.i2cWriteBuffer(_I2CAddr, drawBuf)" line236="        }" line237="    }" line238="" line239="    /**" line240="     * clear screen" line241="     */" line242="    //% blockId=&quot;OLED_CLEAR&quot; block=&quot;clear&quot;" line243="    //% weight=63 blockGap=8" line244="    //% parts=OLED trackArgs=0" line245="    export function clear() {" line246="        _screen.fill(0)" line247="        _screen[0] = 0x40" line248="        draw()" line249="    }" line250="" line251="    /**" line252="     * turn on screen" line253="     */" line254="    //% blockId=&quot;OLED_ON&quot; block=&quot;display on&quot;" line255="    //% weight=62 blockGap=8" line256="    //% parts=OLED trackArgs=0" line257="    export function on() {" line258="        cmd1(0xAF)" line259="    }" line260="" line261="    /**" line262="     * turn off screen" line263="     */" line264="    //% blockId=&quot;OLED_OFF&quot; block=&quot;display off&quot;" line265="    //% weight=61 blockGap=8" line266="    //% parts=OLED trackArgs=0" line267="    export function off() {" line268="        cmd1(0xAE)" line269="    }" line270="" line271="    /**" line272="     * zoom mode" line273="     * @param d true zoom / false normal, eg: true" line274="     */" line275="    //% blockId=&quot;OLED_ZOOM&quot; block=&quot;zoom %d&quot;" line276="    //% weight=60 blockGap=8" line277="    //% parts=OLED trackArgs=0" line278="    export function zoom(d: boolean = true) {" line279="        _ZOOM = (d) ? 1 : 0" line280="        cmd2(0xd6, _ZOOM)" line281="    }" line282="" line283="    /**" line284="     * OLED initialize" line285="     * @param addr is i2c addr, eg: 60" line286="     */" line287="    //% blockId=&quot;OLED_initialize&quot; block=&quot;initialize OLED&quot;" line288="    //% weight=100 blockGap=8" line289="    //% parts=OLED trackArgs=0" line290="    export function initialize() {" line291="        _I2CAddr = 60;" line292="        _ZOOM = 0" line293="        cmd1(0xAE)       // SSD1306_DISPLAYOFF" line294="        cmd1(0xA4)       // SSD1306_DISPLAYALLON_RESUME" line295="        cmd2(0xD5, 0xF0) // SSD1306_SETDISPLAYCLOCKDIV" line296="        cmd2(0xA8, 0x3F) // SSD1306_SETMULTIPLEX" line297="        cmd2(0xD3, 0x00) // SSD1306_SETDISPLAYOFFSET" line298="        cmd1(0 | 0x0)    // line #SSD1306_SETSTARTLINE" line299="        cmd2(0x8D, 0x14) // SSD1306_CHARGEPUMP" line300="        cmd2(0x20, 0x00) // SSD1306_MEMORYMODE" line301="        cmd3(0x21, 0, 127) // SSD1306_COLUMNADDR" line302="        cmd3(0x22, 0, 63)  // SSD1306_PAGEADDR" line303="        cmd1(0xa0 | 0x1) // SSD1306_SEGREMAP" line304="        cmd1(0xc8)       // SSD1306_COMSCANDEC" line305="        cmd2(0xDA, 0x12) // SSD1306_SETCOMPINS" line306="        cmd2(0x81, 0xCF) // SSD1306_SETCONTRAST" line307="        cmd2(0xd9, 0xF1) // SSD1306_SETPRECHARGE" line308="        cmd2(0xDB, 0x40) // SSD1306_SETVCOMDETECT" line309="        cmd1(0xA6)       // SSD1306_NORMALDISPLAY" line310="        cmd2(0xD6, _ZOOM)    // zoom off" line311="        cmd1(0xAF)       // SSD1306_DISPLAYON" line312="        clear()" line313="    }" line314="}" numlines="315"></mutation><next><block type="OLED_initialize" id="-=f`Tp%/Lmc[X9=!J!jE"></block></next></block></statement></block></xml>